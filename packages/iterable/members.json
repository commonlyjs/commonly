[
  {
    "name": "chain",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "mapper",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Mapper",
          "description": "is a mapping function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueA",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueB",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { chain } from \"@commonly/iterable\"\r\rchain(x => [ x, x * x ], [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 0, 0, 1, 1, 1, 1, 2, 4, 3, 9, 5, 25, 8, 64 ]\r"
    ],
    "metadata": {
      "source": "/chain/chain.ts",
      "specification": "/chain/chain.spec.ts"
    },
    "description": "Applies a mapper function to each element in the iterable, producing an iterable of the same type."
  },
  {
    "name": "distinct",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueA",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueB",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { distinct } from \"@commonly/iterable\"\r\rdistinct([ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 0, 1, 2, 3, 5, 8 ]\r"
    ],
    "metadata": {
      "source": "/distinct/distinct.ts",
      "specification": "/distinct/distinct.spec.ts"
    },
    "description": "Returns a duplicated iterable of the same type as the one given."
  },
  {
    "name": "drop",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "n",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is a number of elements to be dropped"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { drop } from \"@commonly/iterable\"\r\rdrop(5, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 5, 8 ]\r"
    ],
    "metadata": {
      "source": "/drop/drop.ts",
      "specification": "/drop/drop.spec.ts"
    },
    "description": "Returns an iterable which contains a slice of all elements of given `iterable` except for the first `n` elements."
  },
  {
    "name": "every",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "predicate",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Predicate",
          "description": "is a predicate function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": null,
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { every } from \"@commonly/iterable\"\r\revery(x => x % 2, [ 0, 1, 1, 2, 3, 5, 8 ])      // -> false\r"
    ],
    "metadata": {
      "source": "/every/every.ts",
      "specification": "/every/every.spec.ts"
    },
    "description": "Applies a `predicate` function to each element in the `iterable`, returning a boolean indicating whether all of the elements passed this predicate."
  },
  {
    "name": "find",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "predicate",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Predicate",
          "description": "is a predicate function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": null,
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { find } from \"@commonly/iterable\"\r\rfind(x => x > 2, [ 0, 1, 1, 2, 3, 5, 8 ])      // -> 3\r"
    ],
    "metadata": {
      "source": "/find/find.ts",
      "specification": "/find/find.spec.ts"
    },
    "description": "Applies a `predicate` function to each element in the `iterable`, returning an element passing this predicate."
  },
  {
    "name": "filter",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "predicate",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Predicate",
          "description": "is a predicate function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": null,
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { filter } from \"@commonly/iterable\"\r\rfilter(x => x % 2, [ 0, 1, 1, 2, 3, 5, 8 ])      // -> [ 1, 1, 2, 3, 5 ]\r"
    ],
    "metadata": {
      "source": "/filter/filter.ts",
      "specification": "/filter/filter.spec.ts"
    },
    "description": "Applies a `predicate` function to each element in the `iterable`, producing an iterable of the same type with elements passing this predicate."
  },
  {
    "name": "head",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "a first element of an iterable"
      }
    },
    "examples": [
      "import { head } from \"@commonly/iterable\"\r\rhead([ 0, 1, 1, 2, 3, 5, 8 ])     // -> 0\r"
    ],
    "metadata": {
      "source": "/head/head.ts",
      "specification": "/head/head.spec.ts"
    },
    "description": "Returns a first element of `iterable`."
  },
  {
    "name": "last",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "a last element of an iterable"
      }
    },
    "examples": [
      "import { last } from \"@commonly/iterable\"\r\rlast([ 0, 1, 1, 2, 3, 5, 8 ])     // -> 8\r"
    ],
    "metadata": {
      "source": "/last/last.ts",
      "specification": "/last/last.spec.ts"
    },
    "description": "Returns a last element of `iterable`."
  },
  {
    "name": "map",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "mapper",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Mapper",
          "description": "is a mapping function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TValueA",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueB",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { map } from \"@commonly/iterable\"\r\rmap(x => x * x, [ 0, 1, 1, 2, 3, 5, 8 ])         // -> [ 0, 1, 1, 4, 9, 25, 64 ]\r"
    ],
    "metadata": {
      "source": "/map/map.ts",
      "specification": "/map/map.spec.ts"
    },
    "description": "Applies a mapper function to each element in the iterable, producing an iterable of the same type."
  },
  {
    "name": "nth",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "i",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is a position of an element"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an nth element of an iterable"
      }
    },
    "examples": [
      "import { nth } from \"@commonly/iterable\"\r\rnth(4, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> 3\r"
    ],
    "metadata": {
      "source": "/nth/nth.ts",
      "specification": "/nth/nth.spec.ts"
    },
    "description": "Returns an `i`-nth element of `iterable`."
  },
  {
    "name": "partition",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "n",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is a number of elements to be put into a tuple"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { partition } from \"@commonly/iterable\"\r\rpartition(2, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ [ 0, 1 ], [ 1, 2 ], [ 3, 5 ], [ 8 ] ]\r"
    ],
    "metadata": {
      "source": "/partition/partition.ts",
      "specification": "/partition/partition.spec.ts"
    },
    "description": "Returns an iterable partitioned into `n`-tuples."
  },
  {
    "name": "partitionBy",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "mapper",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Mapper",
          "description": "is a mapper function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TBy",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { partitionBy } from \"@commonly/iterable\"\r\rpartitionBy(number => number > 2, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ [ 0, 1, 1, 2 ], [ 3, 5, 8 ] ]\r"
    ],
    "metadata": {
      "source": "/partitionBy/partitionBy.ts",
      "specification": "/partitionBy/partitionBy.spec.ts"
    },
    "description": "Returns an iterable partitioned into tuples."
  },
  {
    "name": "reduce",
    "since": "1.0.0",
    "remarks": [
      "Often reduce function happens to be called a {@link https://en.wikipedia.org/wiki/Fold_(higher-order_function) | fold function}."
    ],
    "signature": {
      "parameters": [
        {
          "name": "reducer",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Reducer",
          "description": "is a reducing function"
        },
        {
          "name": "accumulator",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TAccumulator",
          "description": "is an initial value for an accumulator"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be reduced"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueA",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueB",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "TAccumulator",
        "description": "an accumulated value"
      }
    },
    "examples": [
      "import { reduce } from \"@commonly/iterable\"\r\rreduce((accumulator, value) => accumulator + value, 0, [0, 1, 1, 2, 3])      // -> 7\r"
    ],
    "metadata": {
      "source": "/reduce/reduce.ts",
      "specification": "/reduce/reduce.spec.ts"
    },
    "description": "Perform a reduction on a given iterable by applying a given {@link @commonly/type:Reducer | reducing function} to each yield value from an iterable."
  },
  {
    "name": "reverse",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { reverse } from \"@commonly/iterable\"\r\rreverse([ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 8, 5, 3, 2, 1, 1, 0 ]\r"
    ],
    "metadata": {
      "source": "/reverse/reverse.ts",
      "specification": "/reverse/reverse.spec.ts"
    },
    "description": "Returns an iterable of which the order of the elements is reversed."
  },
  {
    "name": "size",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { size } from \"@commonly/iterable\"\r\rsize([ 0, 1, 1, 2, 3, 5, 8 ])     // -> 7\r"
    ],
    "metadata": {
      "source": "/size/size.ts",
      "specification": "/size/size.spec.ts"
    },
    "description": "Returns the size of the `iterable`."
  },
  {
    "name": "slice",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "start",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is a beginning of a slice"
        },
        {
          "name": "end",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is an end of a slice"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { slice } from \"@commonly/iterable\"\r\rslice(1, 5, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 1, 1, 2, 3, 5 ]\r"
    ],
    "metadata": {
      "source": "/slice/slice.ts",
      "specification": "/slice/slice.spec.ts"
    },
    "description": "Returns an iterable which contains a slice of elements of given `iterable`."
  },
  {
    "name": "some",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "predicate",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Predicate",
          "description": "is a predicate function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": null,
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { some } from \"@commonly/iterable\"\r\rsome(x => x % 2, [ 0, 1, 1, 2, 3, 5, 8 ])      // -> true\r"
    ],
    "metadata": {
      "source": "/some/some.ts",
      "specification": "/some/some.spec.ts"
    },
    "description": "Applies a `predicate` function to each element in the `iterable`, returning a boolean indicating whether any of the elements passed this predicate."
  },
  {
    "name": "sort",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "comparator",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Comparator",
          "description": "is a comparator function"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { sort } from \"@commonly/iterable\"\r\rsort((a, b) => b - a, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 8, 5, 3, 2, 1, 1, 0 ]\r"
    ],
    "metadata": {
      "source": "/sort/sort.ts",
      "specification": "/sort/sort.spec.ts"
    },
    "description": "Returns an iterable of which the order of the elements is dictated by a `comparator` function."
  },
  {
    "name": "take",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "n",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "number",
          "description": "is a number of elements to be taken"
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { take } from \"@commonly/iterable\"\r\rtake(5, [ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 0, 1, 1, 2, 3 ]\r"
    ],
    "metadata": {
      "source": "/take/take.ts",
      "specification": "/take/take.spec.ts"
    },
    "description": "Returns an iterable which contains a slice of only the first `n` elements of given `iterable`."
  },
  {
    "name": "tail",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": "is an iterable to be iterated over"
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Iterable",
        "description": "an iterable of the same type as the one given"
      }
    },
    "examples": [
      "import { tail } from \"@commonly/iterable\"\r\rtail([ 0, 1, 1, 2, 3, 5, 8 ])     // -> [ 1, 1, 2, 3, 5, 8 ]\r"
    ],
    "metadata": {
      "source": "/tail/tail.ts",
      "specification": "/tail/tail.spec.ts"
    },
    "description": "Returns a tail of `iterable` as an iterable of the same type as the one given."
  },
  {
    "name": "transduce",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "transducer",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Transducer",
          "description": null
        },
        {
          "name": "iterable",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Iterable",
          "description": null
        },
        {
          "name": "reducer",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Transduced",
          "description": null
        },
        {
          "name": "accumulator",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TAccumulator",
          "description": null
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueA",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValueB",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "TAccumulator",
        "description": null
      }
    },
    "examples": [],
    "metadata": {
      "source": "/transduce/transduce.ts",
      "specification": "/transduce/transduce.spec.ts"
    },
    "description": "[Not yet documented]"
  }
]