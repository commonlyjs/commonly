[
  {
    "name": "curry",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "f",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Function.Variadic",
          "description": "is a function to be curried"
        }
      ],
      "typeparameters": [
        {
          "name": "TResult",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TParameters",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Function.Curried",
        "description": "a curried version of an f function"
      }
    },
    "examples": [
      "import { curry } from \"@commonly/function\"\r\rconst power = curry(Math.pow)\rpower(2)(3)     // -> 8\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Preforms a {@link https://en.wikipedia.org/wiki/Currying | currying} of an f function."
  },
  {
    "name": "empty",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "value",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TValue | ",
          "description": "is an object to be emptied"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "TValue",
        "description": "an empty object of that type"
      }
    },
    "examples": [
      "import { empty } from \"@commonly/function\"\r\rempty([ 1, 1, 2 ])           // -> []\rempty(\"112\")                 // -> \"\"\rempty({ x: 1, y: 1, z: 2 })  // -> {}\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Creates an empty value of the same type as the one passed in."
  },
  {
    "name": "identity",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "value",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TValue",
          "description": "is any given value"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "TValue",
        "description": "a passed in value"
      }
    },
    "examples": [
      "import { identity } from \"@commonly/function\"\r\ridentity(2)     // -> 2\ridentity(3)     // -> 3\ridentity(5)     // -> 5\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "In mathematics, an identity function, also called an identity relation or identity map or identity transformation, is a function that always returns the same value that was used as its argument. That is, for f being identity the equality f(x) = x holds for all x."
  },
  {
    "name": "negate",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "predicate",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Predicate",
          "description": "is a predicate function to be negated"
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Predicate",
        "description": "a negated version of a predicate function"
      }
    },
    "examples": [
      "import { negate } from \"@commonly/function\"\r\rconst isUnsealed = negate(Object.isSealed)\risUnsealed(window)  // -> true\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Negates a given {@link @commonly/type:Primitive | predicate function}, thus creating a new negated version of that function."
  },
  {
    "name": "noop",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "_",
          "variadic": true,
          "defaultValue": null,
          "optional": false,
          "type": "unknown[]",
          "description": "is a variadic list of parameters which are unused anyway"
        }
      ],
      "typeparameters": [],
      "returnValue": {
        "type": "undefined",
        "description": "an undefined"
      }
    },
    "examples": [
      "import { noop } from \"@commonly/function\"\r\rnoop(1, 1, 2, 3, 5)     // -> undefined\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Always returns an undefined no matter the arguments."
  },
  {
    "name": "partial",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "f",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "Function.Variadic",
          "description": "is a function to partially apply list of arguments to"
        },
        {
          "name": "applied",
          "variadic": true,
          "defaultValue": null,
          "optional": false,
          "type": "TApplied",
          "description": "is a list of arguments to be prepended to an f function"
        }
      ],
      "typeparameters": [
        {
          "name": "TResult",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TParameters",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TApplied",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Function.Partial",
        "description": "a partially applied f function"
      }
    },
    "examples": [
      " import { partial } from \"@commonly/function\"\r\rconst isNaN = partial(Object.is, NaN)\risNaN(NaN)  // -> true\r"
    ],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Partially applies a list of arguments to an f function. It's similar to a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind | Function.prototype.bind} method, except it preserves *this* context."
  },
  {
    "name": "reduced",
    "since": null,
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "value",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TValue",
          "description": null
        }
      ],
      "typeparameters": [
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Reduced",
        "description": null
      }
    },
    "examples": [],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "[Not yet documented]"
  },
  {
    "name": "reducer",
    "since": "1.0.0",
    "remarks": [],
    "signature": {
      "parameters": [
        {
          "name": "accumulator",
          "variadic": false,
          "defaultValue": null,
          "optional": false,
          "type": "TAccumulator",
          "description": null
        }
      ],
      "typeparameters": [
        {
          "name": "TAccumulator",
          "defaultValue": null,
          "extends": null
        },
        {
          "name": "TValue",
          "defaultValue": null,
          "extends": null
        }
      ],
      "returnValue": {
        "type": "Reducer",
        "description": "a reducer"
      }
    },
    "examples": [],
    "metadata": {
      "source": null,
      "specification": null
    },
    "description": "Provides a reducing function based on passed in accumulator, if nothing suitable is found, then it returns an identity function."
  }
]